<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Detainment Management</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Font Awesome Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
        }
        .btn-transition {
            transition: all 0.3s ease;
        }
        .btn-transition:hover {
            transform: translateY(-2px);
        }
        .stat-card {
            transition: all 0.3s ease;
        }
        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        .table-hover tr:hover {
            background-color: rgba(79, 70, 229, 0.05) !important;
        }
        .custom-checkbox {
            cursor: pointer;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-indigo-50 via-blue-50 to-purple-50 min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <!-- Header with gradient text -->
        <div class="mb-10 text-center">
            <h1 class="text-4xl font-bold mb-3 bg-clip-text text-transparent bg-gradient-to-r from-indigo-600 to-blue-500">
                Student Detainment Dashboard
            </h1>
            <p class="text-gray-600 text-lg">Monitor and manage student academic progress with ease</p>
        </div>

        <!-- Control Panel -->
        <div class="bg-white rounded-xl shadow-lg p-6 mb-8 border border-indigo-100">
            <div class="flex flex-col md:flex-row justify-between items-center gap-4">
                <div class="flex items-center">
                    <input id="selectAll" type="checkbox" class="h-5 w-5 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500 custom-checkbox">
                    <label for="selectAll" class="ml-2 text-gray-700 font-medium">Select All Students</label>
                </div>
                
                <div class="flex flex-wrap gap-3">
                    <select id="yearFilter" class="rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-gray-700 py-2 px-3">
                        <option value="">All Academic Years</option>
                        <option id="firstYear" value="">1st Year</option>
                        <option id="secondYear" value="">2nd Year</option>
                        <option id="thirdYear" value="">3rd Year</option>
                        <option id="forthYear" value="">4th Year</option>
                    </select>
                    
                    <button id="toggleDetendBtn" class="bg-gradient-to-r from-indigo-600 to-indigo-700 hover:from-indigo-700 hover:to-indigo-800 text-white py-2 px-4 rounded-lg shadow transition btn-transition flex items-center">
                        <i class="fas fa-exchange-alt mr-2"></i>
                        Toggle Status
                    </button>
                    
                    <button id="refreshBtn" class="bg-gradient-to-r from-emerald-500 to-green-600 hover:from-emerald-600 hover:to-green-700 text-white py-2 px-4 rounded-lg shadow transition btn-transition flex items-center">
                        <i class="fas fa-sync-alt mr-2"></i>
                        Refresh
                    </button>
                    
                    <a href="#" id="pdfDownload" class="bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white py-2 px-4 rounded-lg shadow transition btn-transition flex items-center">
                        <i class="fa-solid fa-file-pdf mr-2"></i>
                        Export PDF
                    </a>
                </div>
            </div>
            
            <!-- Year-wise student count stats -->
            <div class="mt-6 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
                <div class="stat-card flex items-center justify-between bg-gradient-to-r from-blue-50 to-blue-100 p-4 rounded-xl border border-blue-200">
                    <div class="flex flex-col">
                        <span class="text-blue-800 font-medium">1st Year</span>
                        <span class="text-xs text-blue-600">Current Batch</span>
                    </div>
                    <span id="yearFirstCount" class="bg-blue-200 text-blue-800 px-3 py-1 rounded-full font-bold text-sm">
                        <i class="fas fa-spinner fa-spin"></i>
                    </span>
                </div>
                
                <div class="stat-card flex items-center justify-between bg-gradient-to-r from-purple-50 to-purple-100 p-4 rounded-xl border border-purple-200">
                    <div class="flex flex-col">
                        <span class="text-purple-800 font-medium">2nd Year</span>
                        <span class="text-xs text-purple-600">Sophomores</span>
                    </div>
                    <span id="yearSecondCount" class="bg-purple-200 text-purple-800 px-3 py-1 rounded-full font-bold text-sm">
                        <i class="fas fa-spinner fa-spin"></i>
                    </span>
                </div>
                
                <div class="stat-card flex items-center justify-between bg-gradient-to-r from-amber-50 to-amber-100 p-4 rounded-xl border border-amber-200">
                    <div class="flex flex-col">
                        <span class="text-amber-800 font-medium">3rd Year</span>
                        <span class="text-xs text-amber-600">Juniors</span>
                    </div>
                    <span id="yearThirdCount" class="bg-amber-200 text-amber-800 px-3 py-1 rounded-full font-bold text-sm">
                        <i class="fas fa-spinner fa-spin"></i>
                    </span>
                </div>
                
                <div class="stat-card flex items-center justify-between bg-gradient-to-r from-emerald-50 to-emerald-100 p-4 rounded-xl border border-emerald-200">
                    <div class="flex flex-col">
                        <span class="text-emerald-800 font-medium">4th Year</span>
                        <span class="text-xs text-emerald-600">Seniors</span>
                    </div>
                    <span id="yearFourthCount" class="bg-emerald-200 text-emerald-800 px-3 py-1 rounded-full font-bold text-sm">
                        <i class="fas fa-spinner fa-spin"></i>
                    </span>
                </div>
            </div>
        </div>

        <!-- Students Table -->
        <div class="bg-white rounded-xl shadow-lg overflow-hidden border border-indigo-100">
            <div class="p-5 flex justify-between items-center bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200">
                <div class="flex items-center">
                    <i class="fas fa-user-graduate text-indigo-600 mr-3 text-xl"></i>
                    <h2 class="text-xl font-semibold text-gray-700">Student List</h2>
                </div>
                <div class="flex items-center bg-white py-1 px-3 rounded-full border border-gray-200 shadow-sm">
                    <span class="text-sm font-medium text-indigo-600"><span id="selectedCount">0</span></span>
                    <span class="text-sm text-gray-500 mx-1">selected of</span>
                    <span class="text-sm font-medium text-gray-700"><span id="totalCount">0</span> students</span>
                </div>
            </div>
            
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200 table-hover">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <i class="fas fa-check-square text-indigo-400 mr-1"></i> Select
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <i class="fas fa-id-card text-indigo-400 mr-1"></i> Enrollment No
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <i class="fas fa-calendar-alt text-indigo-400 mr-1"></i> Year
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <i class="fas fa-chart-line text-indigo-400 mr-1"></i> CGPA
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <i class="fas fa-info-circle text-indigo-400 mr-1"></i> Status
                            </th>
                        </tr>
                    </thead>
                    <tbody id="studentTableBody" class="bg-white divide-y divide-gray-200">
                        <!-- Student data will be loaded here dynamically -->
                        <tr>
                            <td colspan="5" class="px-6 py-8 text-center text-gray-500">
                                <div class="flex flex-col items-center justify-center">
                                    <div class="animate-spin rounded-full h-10 w-10 border-4 border-indigo-500 border-t-transparent mb-3"></div>
                                    <p>Loading student data...</p>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            
            <div id="noStudentsMessage" class="hidden p-12 text-center text-gray-500">
                <i class="fas fa-user-graduate text-5xl mb-4 text-gray-300"></i>
                <p class="text-lg">No students found with the current filter settings.</p>
                <p class="mt-2">Try changing the academic year filter or refresh the data.</p>
            </div>
        </div>
        
        <!-- Footer -->
        <div class="mt-8 text-center text-gray-500 text-sm">
            <p>&copy; 2025 Student Detainment Management System</p>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', async function() {
            const selectAllCheckbox = document.getElementById('selectAll');
            const toggleDetendBtn = document.getElementById('toggleDetendBtn');
            const yearFilter = document.getElementById('yearFilter');
            const refreshBtn = document.getElementById('refreshBtn');
            const studentTableBody = document.getElementById('studentTableBody');
            const noStudentsMessage = document.getElementById('noStudentsMessage');
            const selectedCountEl = document.getElementById('selectedCount');
            const totalCountEl = document.getElementById('totalCount');
            const pdfDownloadBtn = document.getElementById('pdfDownload');
    
            const currentYear = new Date().getFullYear();

            // Update year values and labels in dropdown
            const firstYear = document.getElementById('firstYear');
            firstYear.value = currentYear-1;
            firstYear.textContent = `1st Year (${currentYear-1})`;

            const secondYear = document.getElementById('secondYear');
            secondYear.value = currentYear - 2;
            secondYear.textContent = `2nd Year (${currentYear - 2})`;

            const thirdYear = document.getElementById('thirdYear');
            thirdYear.value = currentYear - 3;
            thirdYear.textContent = `3rd Year (${currentYear - 3})`;

            const forthYear = document.getElementById('forthYear');
            forthYear.value = currentYear - 4;
            forthYear.textContent = `4th Year (${currentYear - 4})`;
            
            let studentData = [];
            
            // Load student data from API
            async function loadStudents() {
                try {
                    // Show loading animation
                    studentTableBody.innerHTML = `
                        <tr>
                            <td colspan="5" class="px-6 py-8 text-center text-gray-500">
                                <div class="flex flex-col items-center justify-center">
                                    <div class="animate-spin rounded-full h-10 w-10 border-4 border-indigo-500 border-t-transparent mb-3"></div>
                                    <p>Loading student data...</p>
                                </div>
                            </td>
                        </tr>
                    `;
                    
                    const response = await fetch('/trData');
                    if (!response.ok) {
                        throw new Error('Failed to fetch student data');
                    }
                    
                    studentData = await response.json();
                    renderStudentsTable();
                    updateSelectedCount();
                    
                    // Load year counts
                    loadYearCounts();
                    
                } catch (error) {
                    console.error('Error loading students:', error);
                    studentTableBody.innerHTML = `
                        <tr>
                            <td colspan="5" class="px-6 py-8 text-center text-red-500">
                                <div class="flex flex-col items-center justify-center">
                                    <i class="fas fa-exclamation-triangle text-3xl mb-3"></i>
                                    <p class="font-medium">Error loading students: ${error.message}</p>
                                    <p class="mt-2 text-sm">Please try refreshing the page</p>
                                </div>
                            </td>
                        </tr>
                    `;
                }
            }
            
            // Load student counts by year
            async function loadYearCounts() {
                const currentYear = new Date().getFullYear();
                try {
                    // Define year-element ID mapping
                    const yearMapping = {
                        [currentYear-1]: 'yearFirstCount',
                        [currentYear-2]: 'yearSecondCount',
                        [currentYear-3]: 'yearThirdCount',
                        [currentYear-4]: 'yearFourthCount'
                    };
                    
                    for (let year = currentYear-4; year < currentYear; year++) {
                        const countElementId = yearMapping[year];
                        const countElement = document.getElementById(countElementId);
                        
                        if (countElement) {
                            countElement.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                            
                            try {
                                const response = await fetch(`/trData/count/${year}`);
                                const countResponse = await response.json();
                                
                                // Apply animation for count update
                                setTimeout(() => {
                                    countElement.textContent = countResponse.totalStudents ?? 0;
                                    countElement.classList.add('animate-pulse');
                                    setTimeout(() => {
                                        countElement.classList.remove('animate-pulse');
                                    }, 1000);
                                }, 300);
                            } catch (err) {
                                countElement.textContent = '0';
                                console.error(`Error loading count for year ${year}:`, err);
                            }
                        }
                    }
                } catch (error) {
                    console.error('Error loading year counts:', error);
                    const countIds = ['yearFirstCount', 'yearSecondCount', 'yearThirdCount', 'yearFourthCount'];
                    countIds.forEach(id => {
                        const element = document.getElementById(id);
                        if (element) element.textContent = 'Error';
                    });
                }
            }

            // Render students table
            function renderStudentsTable() {
                if (!studentData || studentData.length === 0) {
                    studentTableBody.innerHTML = '';
                    noStudentsMessage.classList.remove('hidden');
                    totalCountEl.textContent = '0';
                    return;
                }
                
                noStudentsMessage.classList.add('hidden');
                totalCountEl.textContent = studentData.length;
                
                // Filter by year if selected
                const selectedYear = yearFilter.value;
                pdfDownloadBtn.href = `/trData/students/pdf/${selectedYear}`;
                const filteredStudents = selectedYear ? 
                    studentData.filter(student => student.year.toString() === selectedYear) : 
                    studentData;
                
                if (filteredStudents.length === 0) {
                    studentTableBody.innerHTML = '';
                    noStudentsMessage.classList.remove('hidden');
                    return;
                }
                
                // Render the table rows
                studentTableBody.innerHTML = filteredStudents.map(student => {
                    // Calculate CGPA
                    const semesters = [
                        student.sem_1, student.sem_2, student.sem_3, student.sem_4,
                        student.sem_5, student.sem_6, student.sem_7, student.sem_8
                    ].filter(sem => sem > 0);
                    
                    const avgCGPA = semesters.length > 0 
                        ? (semesters.reduce((sum, sem) => sum + sem, 0) / semesters.length).toFixed(2)
                        : 'N/A';
                    
                    // Determine CGPA badge color
                    let cgpaBadgeClass = '';
                    if (avgCGPA !== 'N/A') {
                        if (parseFloat(avgCGPA) >= 8.5) cgpaBadgeClass = 'bg-emerald-100 text-emerald-800';
                        else if (parseFloat(avgCGPA) >= 7.0) cgpaBadgeClass = 'bg-blue-100 text-blue-800';
                        else if (parseFloat(avgCGPA) >= 5.5) cgpaBadgeClass = 'bg-amber-100 text-amber-800';
                        else cgpaBadgeClass = 'bg-orange-100 text-orange-800';
                    } else {
                        cgpaBadgeClass = 'bg-gray-100 text-gray-600';
                    }
                    
                    return `
                        <tr class="hover:bg-gray-50 transition duration-150 ease-in-out">
                            <td class="px-6 py-4 whitespace-nowrap">
                                <input type="checkbox" class="student-checkbox h-5 w-5 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500 custom-checkbox" 
                                       data-enroll="${student.enrollNo}" 
                                       data-detend="${student.detend}">
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                ${student.enrollNo}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                ${student.year}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${cgpaBadgeClass}">
                                    ${avgCGPA}
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full 
                                    ${student.detend ? 'bg-red-100 text-red-800 border border-red-200' : 'bg-green-100 text-green-800 border border-green-200'}">
                                    ${student.detend ? '<i class="fas fa-exclamation-circle mr-1"></i> Detained' : '<i class="fas fa-check-circle mr-1"></i> Active'}
                                </span>
                            </td>
                        </tr>
                    `;
                }).join('');
                
                // Reattach event listeners
                attachCheckboxListeners();
            }
            
            // Attach event listeners to checkboxes
            function attachCheckboxListeners() {
                document.querySelectorAll('.student-checkbox').forEach(checkbox => {
                    checkbox.addEventListener('change', updateSelectedCount);
                });
            }
            
            // Update selected count
            function updateSelectedCount() {
                const selectedCheckboxes = document.querySelectorAll('.student-checkbox:checked');
                selectedCountEl.textContent = selectedCheckboxes.length;
                
                // Enable/disable toggle button based on selection
                toggleDetendBtn.disabled = selectedCheckboxes.length === 0;
                if (selectedCheckboxes.length === 0) {
                    toggleDetendBtn.classList.add('opacity-60');
                } else {
                    toggleDetendBtn.classList.remove('opacity-60');
                }
            }
            
            // Select All functionality
            selectAllCheckbox.addEventListener('change', function() {
                document.querySelectorAll('.student-checkbox').forEach(checkbox => {
                    checkbox.checked = selectAllCheckbox.checked;
                });
                updateSelectedCount();
            });
            
            // Year filter functionality
            yearFilter.addEventListener('change', function() {
                renderStudentsTable();
                // Reset select all checkbox
                selectAllCheckbox.checked = false;
                updateSelectedCount();
            });
            
            // Toggle Detend Status functionality
            toggleDetendBtn.addEventListener('click', async function() {
                const selectedCheckboxes = document.querySelectorAll('.student-checkbox:checked');
                
                if (selectedCheckboxes.length === 0) {
                    alert('Please select at least one student');
                    return;
                }
                
                toggleDetendBtn.disabled = true;
                toggleDetendBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Processing...';
                
                const updatePromises = Array.from(selectedCheckboxes).map(async checkbox => {
                    const enrollNo = checkbox.getAttribute('data-enroll');
                    const currentDetend = checkbox.getAttribute('data-detend') === 'true';
                    
                    try {
                        const response = await fetch(`/trData/update-student/${enrollNo}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ detend: !currentDetend})
                        });
                        
                        if (!response.ok) {
                            throw new Error(`Failed to update ${enrollNo}`);
                        }
                        
                        return { enrollNo, success: true };
                    } catch (error) {
                        console.error(error);
                        return { enrollNo, success: false, error: error.message };
                    }
                });
                
                try {
                    const results = await Promise.all(updatePromises);
                    const successCount = results.filter(r => r.success).length;
                    const failCount = results.length - successCount;
                    
                    // Create custom toast notification instead of alert
                    const toast = document.createElement('div');
                    toast.className = 'fixed bottom-4 right-4 bg-white shadow-lg rounded-lg p-4 z-50 flex items-center';
                    toast.innerHTML = `
                        <div class="flex items-center ${failCount > 0 ? 'text-amber-500' : 'text-green-500'} mr-3">
                            <i class="${failCount > 0 ? 'fas fa-exclamation-triangle' : 'fas fa-check-circle'} text-2xl"></i>
                        </div>
                        <div>
                            <h4 class="font-medium">${successCount > 0 ? 'Status Update Complete' : 'Update Failed'}</h4>
                            <p class="text-sm text-gray-600">Updated ${successCount} students. ${failCount > 0 ? `Failed: ${failCount}` : ''}</p>
                        </div>
                    `;
                    
                    document.body.appendChild(toast);
                    setTimeout(() => {
                        toast.style.opacity = '0';
                        toast.style.transition = 'opacity 0.5s ease';
                        setTimeout(() => toast.remove(), 500);
                    }, 3000);
                    
                    // Refresh data
                    await loadStudents();
                } catch (error) {
                    console.error('Error updating detend status:', error);
                    alert('An error occurred while updating. Please try again.');
                } finally {
                    toggleDetendBtn.disabled = false;
                    toggleDetendBtn.innerHTML = '<i class="fas fa-exchange-alt mr-2"></i> Toggle Status';
                }
            });
            
            // Refresh button functionality
            refreshBtn.addEventListener('click', async function() {
                refreshBtn.disabled = true;
                refreshBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Refreshing...';
                
                await loadStudents();
                
                refreshBtn.disabled = false;
                refreshBtn.innerHTML = '<i class="fas fa-sync-alt mr-2"></i> Refresh';
            });
            
            // Initial data load
            loadStudents();
        });
    </script>
</body>
</html>